{"version":3,"sources":["assets/cubing-icon sync /^/.//.*/.svg$","assets/cubing-icon/222.svg","assets/cubing-icon/333.svg","assets/cubing-icon/333bf.svg","assets/cubing-icon/333fm.svg","assets/cubing-icon/333mbf.svg","assets/cubing-icon/333oh.svg","assets/cubing-icon/444.svg","assets/cubing-icon/444bf.svg","assets/cubing-icon/555.svg","assets/cubing-icon/555bf.svg","assets/cubing-icon/666.svg","assets/cubing-icon/777.svg","assets/cubing-icon/clock.svg","assets/cubing-icon/minx.svg","assets/cubing-icon/pyram.svg","assets/cubing-icon/skewb.svg","assets/cubing-icon/sq1.svg","assets/tnoodle_logo.svg","redux/Types.js","redux/ActionCreators.js","util/competition.name.util.js","components/EntryInterface.jsx","api/wca.api.js","api/tnoodle.api.js","components/MbldDetail.jsx","constants/wca.constants.js","components/FmcTranslationsDetail.jsx","util/string.util.js","components/EventPicker.jsx","components/EventPickerTable.jsx","components/Loading.jsx","constants/default.wcif.js","components/SideBar.jsx","components/FlashMessage.jsx","components/VersionInfo.jsx","App.js","serviceWorker.js","redux/Reducers.js","redux/Store.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ActionTypes","updateCompetitionName","competitionName","type","payload","updateFileZipBlob","fileZipBlob","setSuggestedFmcTranslations","suggestedFmcTranslations","updateFlashMessage","text","bootstrapBackground","getDefaultCompetitionName","Date","toISOString","split","name","mapDispatchToProps","updatePassword","password","EntryInterface","connect","store","editingDisabled","wcif","props","handleCompetitionNameChange","event","target","value","handlePasswordChange","state","setState","toogleShowPassword","showPassword","this","disabled","className","placeholder","onChange","onClick","checked","readOnly","Component","baseUrl","copiesExtensionId","getDefaultCopiesExtension","copies","specUrl","data","numCopies","fmcTranslationsHelper","translations","languageTags","filter","translation","status","postToTnoodle","endpoint","fetch","method","headers","Accept","body","JSON","stringify","wcaAccessToken","parseQueryString","window","location","hash","isUsingStaging","getQueryParameter","toWcaUrl","path","process","REACT_APP_WCA_ORIGIN","logIn","isLogged","redirectUri","origin","BASE_PATH","logInUrl","REACT_APP_TNOODLE_APP_ID","localStorage","href","getCurrentEnv","getLastLoginEnv","logOut","reload","slice","query","test","reduce","params","param","key","decodeURIComponent","replace","preLoginHref","includes","gotoPreLoginPath","wcaApiFetch","fetchOptions","baseApiUrl","assign","Headers","Authorization","then","response","ok","statusText","updateMbld","mbld","MbldDetail","bestMbldAttempt","handleMbldChange","verifyMbld","showMbldWarning","colSpan","evt","Number","min","onBlur","updateTranslation","selectAllTranslations","resetTranslations","FmcTranslationsDetail","handleTranslation","selectNoneTranslation","selectSuggestedTranslations","toggleTranslations","showTranslations","maybeShowFmcTranslationsDetails","_","chunk","Fragment","title","translationsChunk","i","j","string","checkboxId","htmlFor","display","toUpperCase","TRANSLATIONS_PER_LINE","updateWcaEvent","wcaEvent","EventPicker","wcaFormats","getWcaEvent","rounds","handleNumberOfRoundsChange","numberOfRounds","length","pop","eventId","push","format","format_ids","scrambleSetCount","extensions","updateEvent","handleNumberOfScrambleSetsChange","round","handleRoundFormatChanged","handleNumberOfCopiesChange","find","extension","abbreviate","str","shortName","maybeShowTableTitles","scope","maybeShowTableBody","Array","from","events","src","require","alt","MAX_WCA_ROUNDS","is_multiple_blindfolded","is_fewest_moves","updateTranslations","setWcaFormats","setWcaEvents","wcaEvents","EventPickerTable","competitionId","officialZip","componentDidMount","getFormats","getWcaEvents","getFmcTranslations","setFlashMessage","bg","json","formats","availableTranslations","translationId","handleScrambleButton","competitionNameFileZip","generatingScrambles","multiCubes","requestedScrambles","fmcLanguages","zipPassword","fetchZip","setGeneratingScrambles","blob","flag","downloadZip","fileName","link","document","createElement","URL","createObjectURL","download","setAttribute","appendChild","click","remove","maybeShowEditWarning","scrambleButton","disableScrambleButton","flag1","flag2","item","eventChunks","classColPerEvent","BOOTSTRAP_GRID","wcifEvent","setBlobNull","Loading","role","defaultWcif","formatVersion","persons","schedule","numberOfDays","venues","updateWcif","updateEditingStatus","updateCompetitions","competitions","updateMe","me","updateCompetitionId","addCachedObject","identifier","object","addSuggestedFmcTranslations","setBestMbldAttempt","SideBar","cachedObjects","margin","setLoadingUser","loadingUser","setLoadingCompetitions","loadingCompetitions","setLoadingCompetitionInformation","loadingCompetitionInformation","pluralize","number","currentLocationWithoutQuery","pathname","setPageWithoutRedirect","url","history","pushState","handleManualSelection","removeCompetitionIdQueryParam","handleCompetitionSelection","updateCompetitionIdQueryParam","cachedObject","getCompetitionJson","setWcif","maybeAddCompetition","getAndCacheSuggestedFmcTranslations","getAndCacheBestMbldAttempt","catch","console","error","cachedWcif","cachedSuggestedFmcTranslations","cachedBestMbldAttempt","fetchSuggestedFmcTranslations","fetchBestMbldAttempt","bestAttempt","attempted","competition","searchParams","URLSearchParams","search","set","toString","delete","logInButton","loadingArea","oneWeekAgo","now","getUpcomingManageableCompetitions","FlashMessage","flashMessage","setTimeout","updateOfficialZipStatus","VersionInfo","currentTnoodle","allowedTnoodleVersions","runningVersion","officialBuild","current","allowed","version","allowedVersions","App","Boolean","hostname","match","defaultStore","createStore","action","competitionName2Id","forEach","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03647128.chunk.js","sourcesContent":["var map = {\n\t\"./222.svg\": 35,\n\t\"./333.svg\": 36,\n\t\"./333bf.svg\": 37,\n\t\"./333fm.svg\": 38,\n\t\"./333mbf.svg\": 39,\n\t\"./333oh.svg\": 40,\n\t\"./444.svg\": 41,\n\t\"./444bf.svg\": 42,\n\t\"./555.svg\": 43,\n\t\"./555bf.svg\": 44,\n\t\"./666.svg\": 45,\n\t\"./777.svg\": 46,\n\t\"./clock.svg\": 47,\n\t\"./minx.svg\": 48,\n\t\"./pyram.svg\": 49,\n\t\"./skewb.svg\": 50,\n\t\"./sq1.svg\": 51\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 34;","module.exports = __webpack_public_path__ + \"static/media/222.ee5d629a.svg\";","module.exports = __webpack_public_path__ + \"static/media/333.56c81f38.svg\";","module.exports = __webpack_public_path__ + \"static/media/333bf.570ee151.svg\";","module.exports = __webpack_public_path__ + \"static/media/333fm.b0b8e039.svg\";","module.exports = __webpack_public_path__ + \"static/media/333mbf.8e05b3e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/333oh.c70ef197.svg\";","module.exports = __webpack_public_path__ + \"static/media/444.94fd8058.svg\";","module.exports = __webpack_public_path__ + \"static/media/444bf.4d6669fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/555.b5f1d3b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/555bf.019829df.svg\";","module.exports = __webpack_public_path__ + \"static/media/666.9d9fcb49.svg\";","module.exports = __webpack_public_path__ + \"static/media/777.0548ecd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/clock.dc5f689d.svg\";","module.exports = __webpack_public_path__ + \"static/media/minx.e8cd90c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/pyram.539494f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/skewb.c399da94.svg\";","module.exports = __webpack_public_path__ + \"static/media/sq1.f2b83832.svg\";","module.exports = __webpack_public_path__ + \"static/media/tnoodle_logo.0147e6d0.svg\";","export const ActionTypes = {\n    UPDATE_ME: \"UPDATE_ME\",\n    UPDATE_EVENTS: \"UPDATE_EVENTS\",\n    UPDATE_PASSWORD: \"UPDATE_PASSWORD\",\n    UPDATE_COMPETITION_NAME: \"UPDATE_COMPETITION_NAME\",\n    UPDATE_WCA_EVENT: \"UPDATE_WCA_EVENT\",\n    UPDATE_MBLD: \"UPDATE_MBLD\",\n    SET_BEST_MBLD_ATTEMPT: \"SET_BEST_MBLD_ATTEMPT\",\n    UPDATE_COMPETITIONS: \"UPDATE_COMPETITIONS\",\n    UPDATE_COMPETITION_ID: \"UPDATE_COMPETITION_ID\",\n    UPDATE_WCIF: \"UPDATE_WCIF\",\n    UPDATE_EDITING_STATUS: \"UPDATE_EDITING_STATUS\",\n    UPDATE_OFFICIAL_ZIP_STATUS: \"UPDATE_OFFICIAL_ZIP_STATUS\",\n    UPDATE_FILE_ZIP_BLOB: \"UPDATE_FILE_ZIP_BLOB\",\n    ADD_CACHED_OBJECT: \"ADD_CACHED_OBJECT\",\n    UPDATE_TRANSLATIONS: \"UPDATE_TRANSLATIONS\",\n    UPDATE_TRANSLATION: \"UPDATE_TRANSLATION\",\n    RESET_TRANSLATIONS: \"RESET_TRANSLATIONS\",\n    SELECT_ALL_TRANSLATIONS: \"SELECT_ALL_TRANSLATIONS\",\n    ADD_SUGGESTED_FMC_TRANSLATIONS: \"ADD_SUGGESTED_FMC_TRANSLATIONS\",\n    SET_SUGGESTED_FMC_TRANSLATIONS: \"SET_SUGGESTED_FMC_TRANSLATIONS\",\n    SET_WCA_FORMATS: \"SET_WCA_FORMATS\",\n    SET_WCA_EVENTS: \"SET_WCA_EVENTS\",\n    UPDATE_FLASH_MESSAGE: \"UPDATE_FLASH_MESSAGE\",\n};\n","import { ActionTypes } from \"./Types\";\n\nexport const updateMe = (me) => ({\n    type: ActionTypes.UPDATE_ME,\n    payload: { me },\n});\n\nexport const updateEvents = (events) => ({\n    type: ActionTypes.UPDATE_EVENTS,\n    payload: { events },\n});\n\nexport const updatePassword = (password) => ({\n    type: ActionTypes.UPDATE_PASSWORD,\n    payload: { password },\n});\n\nexport const updateCompetitionName = (competitionName) => ({\n    type: ActionTypes.UPDATE_COMPETITION_NAME,\n    payload: { competitionName },\n});\n\nexport const updateWcaEvent = (wcaEvent) => ({\n    type: ActionTypes.UPDATE_WCA_EVENT,\n    payload: { wcaEvent },\n});\n\nexport const updateMbld = (mbld) => ({\n    type: ActionTypes.UPDATE_MBLD,\n    payload: { mbld },\n});\n\nexport const updateCompetitions = (competitions) => ({\n    type: ActionTypes.UPDATE_COMPETITIONS,\n    payload: { competitions },\n});\n\nexport const updateWcif = (wcif) => ({\n    type: ActionTypes.UPDATE_WCIF,\n    payload: { wcif },\n});\n\nexport const updateEditingStatus = (flag) => ({\n    type: ActionTypes.UPDATE_EDITING_STATUS,\n    payload: { editingDisabled: flag },\n});\n\nexport const updateCompetitionId = (competitionId) => ({\n    type: ActionTypes.UPDATE_COMPETITION_ID,\n    payload: { competitionId },\n});\n\nexport const updateOfficialZipStatus = (flag) => ({\n    type: ActionTypes.UPDATE_OFFICIAL_ZIP_STATUS,\n    payload: { officialZip: flag },\n});\n\n/**\n * When user change some event, we reset blob.\n * If the user generate a scramble and then change some event,\n * this allow generating other set of scrambles.\n */\nexport const updateFileZipBlob = (fileZipBlob) => ({\n    type: ActionTypes.UPDATE_FILE_ZIP_BLOB,\n    payload: { fileZipBlob: fileZipBlob },\n});\n\n/**\n * @param {string} competitionId Since we cache information considering competitions, use id like WC2015.\n * @param {string} identifier WCIF or suggestedFmcLanguages\n * @param {json} object\n */\nexport const addCachedObject = (competitionId, identifier, object) => ({\n    type: ActionTypes.ADD_CACHED_OBJECT,\n    payload: { competitionId, identifier, object },\n});\n\nexport const updateTranslations = (translations) => ({\n    type: ActionTypes.UPDATE_TRANSLATIONS,\n    payload: { translations },\n});\n\nexport const updateTranslation = (id) => ({\n    type: ActionTypes.UPDATE_TRANSLATION,\n    payload: { id },\n});\n\nexport const resetTranslations = () => ({\n    type: ActionTypes.RESET_TRANSLATIONS,\n    payload: {},\n});\n\nexport const selectAllTranslations = () => ({\n    type: ActionTypes.SELECT_ALL_TRANSLATIONS,\n    payload: {},\n});\n\n/**\n * Stores the suggestedFmcTranslations\n * @param {array} suggestedFmcTranslations\n */\nexport const addSuggestedFmcTranslations = (suggestedFmcTranslations) => ({\n    type: ActionTypes.ADD_SUGGESTED_FMC_TRANSLATIONS,\n    payload: { suggestedFmcTranslations },\n});\n\n/**\n * Given an array of languages and a previous array of FMC languages,\n * set as selected FMC language only those present on the first array.\n * @param {array} suggestedFmcTranslations\n */\nexport const setSuggestedFmcTranslations = (suggestedFmcTranslations) => ({\n    type: ActionTypes.SET_SUGGESTED_FMC_TRANSLATIONS,\n    payload: { suggestedFmcTranslations },\n});\n\nexport const setBestMbldAttempt = (bestMbldAttempt) => ({\n    type: ActionTypes.SET_BEST_MBLD_ATTEMPT,\n    payload: { bestMbldAttempt },\n});\n\nexport const setWcaFormats = (wcaFormats) => ({\n    type: ActionTypes.SET_WCA_FORMATS,\n    payload: { wcaFormats },\n});\n\nexport const setWcaEvents = (wcaEvents) => ({\n    type: ActionTypes.SET_WCA_EVENTS,\n    payload: { wcaEvents },\n});\n\nexport const updateFlashMessage = (text, bootstrapBackground) => ({\n    type: ActionTypes.UPDATE_FLASH_MESSAGE,\n    payload: { text, bootstrapBackground },\n});\n","export const getDefaultCompetitionName = () => {\n    let date = new Date();\n    return \"Scrambles for \" + date.toISOString().split(\"T\")[0];\n};\n\nexport const competitionName2Id = competitionName => {\n    return competitionName.replace(/[\\W]/gi, \"\");\n};\n","import React, { Component } from \"react\";\nimport {\n    updatePassword,\n    updateCompetitionName,\n    updateFileZipBlob,\n} from \"../redux/ActionCreators\";\nimport { connect } from \"react-redux\";\nimport { getDefaultCompetitionName } from \"../util/competition.name.util\";\n\nconst mapStateToProps = (store) => ({\n    editingDisabled: store.editingDisabled,\n    competitionName: store.wcif.name,\n});\n\nconst mapDispatchToProps = {\n    updatePassword,\n    updateCompetitionName,\n    updateFileZipBlob,\n};\n\nconst EntryInterface = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class EntryInterface extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                editingDisabled: props.editingDisabled,\n                password: \"\",\n                showPassword: false,\n            };\n        }\n\n        componentDidMount() {\n            this.props.updateCompetitionName(getDefaultCompetitionName());\n        }\n\n        handleCompetitionNameChange = (event) => {\n            this.props.updateCompetitionName(event.target.value);\n\n            // Require another zip with the new name.\n            this.props.updateFileZipBlob(null);\n        };\n\n        handlePasswordChange = (event) => {\n            let state = this.state;\n            state.password = event.target.value;\n            this.setState(state);\n\n            this.props.updatePassword(this.state.password);\n\n            // Require another zip with the new password, in case there was a zip generated.\n            this.props.updateFileZipBlob(null);\n        };\n\n        toogleShowPassword = () => {\n            let state = this.state;\n            state.showPassword = !state.showPassword;\n            this.setState(state);\n        };\n\n        render() {\n            let competitionName = this.props.competitionName;\n            let disabled = this.props.editingDisabled;\n            return (\n                <div className=\"row\">\n                    <div className=\"container mt-2\">\n                        <div className=\"row\">\n                            <div className=\"col-md-6 text-left form-group\">\n                                <label className=\"font-weight-bold pr-1\">\n                                    Competition Name\n                                </label>\n                                <input\n                                    className=\"form-control\"\n                                    placeholder=\"Competition Name\"\n                                    onChange={this.handleCompetitionNameChange}\n                                    value={competitionName}\n                                    disabled={disabled ? \"disabled\" : \"\"}\n                                />\n                            </div>\n\n                            <div className=\"col-md-6 text-left form-group\">\n                                <label className=\"font-weight-bold pr-1\">\n                                    Password\n                                </label>\n                                <input\n                                    className=\"form-control\"\n                                    placeholder=\"Password\"\n                                    type={\n                                        this.state.showPassword\n                                            ? \"\"\n                                            : \"password\"\n                                    }\n                                    onChange={this.handlePasswordChange}\n                                    value={this.state.password}\n                                />\n                                <div onClick={this.toogleShowPassword}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={this.state.showPassword}\n                                        readOnly\n                                    />\n                                    <label>Show password</label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n\nexport default EntryInterface;\n","import { BASE_PATH } from \"../App\";\n\n// Members of the Software Team can configure this here: https://www.worldcubeassociation.org/oauth/applications/123.\n\nconst TNOODLE_ACCESS_TOKEN_KEY = \"TNoodle.accessToken\";\nconst TNOODLE_LAST_LOGIN_ENV = \"TNoodle.lastLoginEnv\";\nconst STAGING = \"staging\";\nconst PRODUCTION = \"production\";\n\n// See https://github.com/thewca/worldcubeassociation.org/wiki/OAuth-documentation-notes#staging-oauth-application\nlet getWcaOrigin = () => {\n    if (isUsingStaging()) {\n        return \"https://staging.worldcubeassociation.org\";\n    }\n    return (\n        process.env.REACT_APP_WCA_ORIGIN ||\n        \"https://www.worldcubeassociation.org\"\n    );\n};\n\nlet getTnoodleAppId = () => {\n    if (isUsingStaging()) {\n        return \"example-application-id\";\n    }\n    return (\n        process.env.REACT_APP_TNOODLE_APP_ID ||\n        \"6145bf3e65fbad4715b049dae2d72a64b8e9a794010abf518fa9364b05a5dd40\"\n    );\n};\n\nlet wcaAccessToken = getHashParameter(\"access_token\");\nif (wcaAccessToken) {\n    window.location.hash = \"\";\n    localStorage[TNOODLE_ACCESS_TOKEN_KEY] = wcaAccessToken;\n    gotoPreLoginPath();\n} else {\n    wcaAccessToken = localStorage[TNOODLE_ACCESS_TOKEN_KEY];\n}\n\nexport function isUsingStaging() {\n    return getQueryParameter(\"staging\") === \"true\";\n}\n\nexport function toWcaUrl(path) {\n    return `${getWcaOrigin()}${path}`;\n}\n\nexport function logIn() {\n    if (isLogged()) {\n        return;\n    }\n\n    let redirectUri = window.location.origin + BASE_PATH + \"/oauth/wca\";\n    let logInUrl = toWcaUrl(\n        `/oauth/authorize?client_id=${getTnoodleAppId()}&redirect_uri=${redirectUri}&response_type=token&scope=public+manage_competitions`\n    );\n    localStorage[\"TNoodle.preLoginHref\"] = window.location.href;\n    window.location = logInUrl;\n}\n\nexport function isLogged() {\n    return (\n        localStorage[TNOODLE_ACCESS_TOKEN_KEY] != null &&\n        getCurrentEnv() === getLastLoginEnv()\n    );\n}\n\nexport function logOut() {\n    delete localStorage[TNOODLE_LAST_LOGIN_ENV];\n    delete localStorage[TNOODLE_ACCESS_TOKEN_KEY];\n    wcaAccessToken = null;\n    window.location.reload();\n}\n\nexport function gotoPreLoginPath() {\n    let preLoginHref = localStorage[\"TNoodle.preLoginHref\"] || \"/\";\n    localStorage[TNOODLE_LAST_LOGIN_ENV] = preLoginHref.includes(\"staging=true\")\n        ? STAGING\n        : PRODUCTION;\n    delete localStorage[\"TNoodle.preLoginHref\"];\n    window.location.replace(preLoginHref);\n}\n\nexport function fetchMe() {\n    return wcaApiFetch(\"/me\")\n        .then(response => response.json())\n        .then(json => json.me);\n}\n\nexport function fetchVersionInfo() {\n    return wcaApiFetch(\"/scramble-program\").then(response => response.json());\n}\n\nexport function getCompetitionJson(competitionId) {\n    return wcaApiFetch(`/competitions/${competitionId}/wcif`).then(response =>\n        response.json()\n    );\n}\n\nexport function getUpcomingManageableCompetitions() {\n    let oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    return wcaApiFetch(\n        `/competitions?managed_by_me=true&start=${oneWeekAgo.toISOString()}`\n    ).then(response => response.json());\n}\n\nfunction getHashParameter(name) {\n    return parseQueryString(window.location.hash)[name];\n}\n\nexport function getQueryParameter(name) {\n    let urlSplit = window.location.href.split(\"?\");\n    let lastElement = urlSplit.slice(-1)[0];\n    return parseQueryString(lastElement)[name];\n}\n\n// Copied from https://stackoverflow.com/a/3855394/1739415\nfunction parseQueryString(query) {\n    if (!query) {\n        return {};\n    }\n\n    return (/^[?#]/.test(query) ? query.slice(1) : query)\n        .split(\"&\")\n        .reduce((params, param) => {\n            let [key, value] = param.split(\"=\");\n            params[key] = value\n                ? decodeURIComponent(value.replace(/\\+/g, \" \"))\n                : \"\";\n            return params;\n        }, {});\n}\n\nconst getLastLoginEnv = () => localStorage[TNOODLE_LAST_LOGIN_ENV];\n\nconst getCurrentEnv = () => (isUsingStaging() ? STAGING : PRODUCTION);\n\nfunction wcaApiFetch(path, fetchOptions) {\n    // TODO - look into refresh token https://github.com/doorkeeper-gem/doorkeeper/wiki/Enable-Refresh-Token-Credentials\n    var baseApiUrl = toWcaUrl(\"/api/v0\");\n    fetchOptions = Object.assign({}, fetchOptions, {\n        headers: new Headers({\n            Authorization: `Bearer ${wcaAccessToken}`,\n            \"Content-Type\": \"application/json\"\n        })\n    });\n\n    return fetch(`${baseApiUrl}${path}`, fetchOptions).then(response => {\n        if (!response.ok) {\n            throw new Error(`${response.status}: ${response.statusText}`);\n        }\n        return response;\n    });\n}\n","let baseUrl = \"https://secret-atoll-71628.herokuapp.com\";\n// let baseUrl = \"http://localhost:2014\";\n\nlet zipEndpoint = \"/wcif/zip\";\nlet versionEndpoint = \"/version\";\nlet fmcTranslationsEndpoint = \"/frontend/fmc/languages/available\";\nlet suggestedFmcTranslationsEndpoint = \"/frontend/fmc/languages/competitors\";\nlet bestMbldAttemptEndpoint = \"/frontend/mbld/best\";\nlet wcaEventsEndpoint = \"/frontend/data/events\";\nlet formatsEndpoint = \"/frontend/data/formats\";\n\nexport const copiesExtensionId =\n    \"org.worldcubeassociation.tnoodle.SheetCopyCount\";\n\nexport const fetchZip = (wcif, mbld, password, translations) => {\n    let payload = {\n        wcif,\n        multiCubes: { requestedScrambles: mbld },\n        fmcLanguages: fmcTranslationsHelper(translations),\n    };\n\n    if (password != null && password.length > 0) {\n        payload.zipPassword = password;\n    }\n\n    return postToTnoodle(zipEndpoint, payload);\n};\n\nexport const fetchWcaEvents = () => {\n    return fetch(baseUrl + wcaEventsEndpoint);\n};\n\nexport const fetchFormats = () => {\n    return fetch(baseUrl + formatsEndpoint);\n};\n\nexport const fetchSuggestedFmcTranslations = (wcif) => {\n    return postToTnoodle(suggestedFmcTranslationsEndpoint, wcif);\n};\n\nexport const fetchBestMbldAttempt = (wcif) => {\n    return postToTnoodle(bestMbldAttemptEndpoint, wcif);\n};\n\nexport const fetchRunningVersion = () => {\n    return fetch(baseUrl + versionEndpoint);\n};\n\n/**\n * This is the default extension object the backend expects\n * @param {} copies\n */\nexport const getDefaultCopiesExtension = (copies = 1) => {\n    return {\n        id: copiesExtensionId,\n        specUrl: \"\",\n        data: {\n            numCopies: copies,\n        },\n    };\n};\n\nexport const fetchAvailableFmcTranslations = () => {\n    return fetch(baseUrl + fmcTranslationsEndpoint);\n};\n\n/**\n * Builds the object expected for FMC translations\n * @param {array} translations e.g. [\"de\", \"da\", \"pt-BR\"]\n */\nconst fmcTranslationsHelper = (translations) => {\n    if (translations == null) {\n        return null;\n    }\n    return {\n        languageTags: translations\n            .filter((translation) => translation.status)\n            .map((translation) => translation.id),\n    };\n};\n\nconst postToTnoodle = (endpoint, payload) =>\n    fetch(baseUrl + endpoint, {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n    });\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { MBLD_MIN } from \"../constants/wca.constants\";\nimport { updateMbld, updateFileZipBlob } from \"../redux/ActionCreators\";\n\nconst mapStateToProps = store => ({\n    mbld: store.mbld,\n    bestMbldAttempt: store.bestMbldAttempt\n});\n\nconst mapDispatchToProps = {\n    updateMbld,\n    updateFileZipBlob\n};\n\nconst MbldDetail = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class extends Component {\n        handleMbldChange = mbld => {\n            this.props.updateMbld(mbld);\n        };\n\n        // When mbld loses focus\n        verifyMbld = () => {\n            let mbld = this.props.mbld;\n            if (mbld < MBLD_MIN) {\n                mbld = MBLD_MIN;\n                this.handleMbldChange(mbld);\n            }\n        };\n\n        showMbldWarning = () => {\n            let bestMbldAttempt = this.props.bestMbldAttempt;\n            let showMbldWarning =\n                bestMbldAttempt != null && this.props.mbld < bestMbldAttempt;\n\n            if (showMbldWarning) {\n                return (\n                    <tr className=\"bg-warning\">\n                        <th colSpan={4}>\n                            {`You selected ${this.props.mbld} cubes for Multi-Blind, but there's a competitor who already tried ${this.props.bestMbldAttempt} at a competition. Proceed if you are really certain of it.`}\n                        </th>\n                    </tr>\n                );\n            }\n        };\n\n        render() {\n            return (\n                <tfoot>\n                    <tr>\n                        <th colSpan={3}>\n                            <p className=\"text-right\">\n                                Select the number of scrambles\n                            </p>\n                        </th>\n                        <td>\n                            <input\n                                className=\"form-control bg-dark text-white\"\n                                type=\"number\"\n                                value={this.props.mbld}\n                                onChange={evt =>\n                                    this.handleMbldChange(\n                                        Number(evt.target.value)\n                                    )\n                                }\n                                min={MBLD_MIN}\n                                onBlur={this.verifyMbld}\n                            />\n                        </td>\n                    </tr>\n                    {this.showMbldWarning()}\n                </tfoot>\n            );\n        }\n    }\n);\n\nexport default MbldDetail;\n","// Currently, WCA allow up to 4 rounds for each event.\nexport const MAX_WCA_ROUNDS = 4;\n\nexport const MBLD_MIN = 2;\nexport const MBLD_DEFAULT = 35;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { capitalize } from \"../util/string.util\";\nimport _ from \"lodash\";\nimport {\n    updateFileZipBlob,\n    updateTranslation,\n    selectAllTranslations,\n    resetTranslations,\n    setSuggestedFmcTranslations,\n} from \"../redux/ActionCreators\";\n\nconst TRANSLATIONS_PER_LINE = 3;\n\nconst mapStateToProps = (store) => ({\n    translations: store.translations,\n    suggestedFmcTranslations: store.suggestedFmcTranslations,\n});\n\nconst mapDispatchToProps = {\n    updateFileZipBlob,\n    updateTranslation,\n    selectAllTranslations,\n    resetTranslations,\n    setSuggestedFmcTranslations,\n};\n\nconst FmcTranslationsDetail = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = { showTranslations: false };\n        }\n\n        handleTranslation = (id) => {\n            this.props.updateFileZipBlob(null);\n            this.props.updateTranslation(id);\n        };\n\n        selectAllTranslations = () => {\n            this.props.updateFileZipBlob(null);\n            this.props.selectAllTranslations();\n        };\n\n        selectNoneTranslation = () => {\n            this.props.updateFileZipBlob(null);\n            this.props.resetTranslations();\n        };\n\n        selectSuggestedTranslations = () => {\n            this.props.updateFileZipBlob(null);\n            this.props.setSuggestedFmcTranslations(\n                this.props.suggestedFmcTranslations\n            );\n        };\n\n        toggleTranslations = () => {\n            this.setState({\n                ...this.state,\n                showTranslations: !this.state.showTranslations,\n            });\n        };\n\n        maybeShowFmcTranslationsDetails = () => {\n            if (\n                !this.state.showTranslations ||\n                this.props.translations == null\n            ) {\n                return;\n            }\n            let translations = _.chunk(\n                this.props.translations,\n                TRANSLATIONS_PER_LINE\n            );\n\n            return (\n                <React.Fragment>\n                    <tr>\n                        <th colSpan={4}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-outline-secondary\"\n                                onClick={this.selectAllTranslations}\n                            >\n                                Select All\n                            </button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-outline-secondary\"\n                                onClick={this.selectNoneTranslation}\n                            >\n                                Select None\n                            </button>\n                            {this.props.suggestedFmcTranslations != null && (\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-outline-secondary\"\n                                    onClick={this.selectSuggestedTranslations}\n                                    title=\"This selection is based on competitor's nationalities.\"\n                                >\n                                    Select Suggested\n                                </button>\n                            )}\n                        </th>\n                    </tr>\n\n                    <tr>\n                        <th colSpan={4} className=\"text-center\">\n                            <table className=\"table table-hover\">\n                                <tbody>\n                                    {translations.map(\n                                        (translationsChunk, i) => (\n                                            <tr key={i}>\n                                                {translationsChunk.map(\n                                                    (translation, j) => {\n                                                        let checkboxId = `fmc-${translation.id}`;\n                                                        return (\n                                                            <React.Fragment\n                                                                key={j}\n                                                            >\n                                                                <th>\n                                                                    <label\n                                                                        htmlFor={\n                                                                            checkboxId\n                                                                        }\n                                                                    >\n                                                                        {capitalize(\n                                                                            translation.display\n                                                                        )}\n                                                                    </label>\n                                                                </th>\n                                                                <th>\n                                                                    <input\n                                                                        type=\"checkbox\"\n                                                                        id={\n                                                                            checkboxId\n                                                                        }\n                                                                        checked={\n                                                                            translation.status\n                                                                        }\n                                                                        onChange={() =>\n                                                                            this.handleTranslation(\n                                                                                translation.id\n                                                                            )\n                                                                        }\n                                                                    />\n                                                                </th>\n                                                                {j <\n                                                                    TRANSLATIONS_PER_LINE -\n                                                                        1 && (\n                                                                    <th />\n                                                                )}\n                                                            </React.Fragment>\n                                                        );\n                                                    }\n                                                )}\n                                            </tr>\n                                        )\n                                    )}\n                                </tbody>\n                            </table>\n                        </th>\n                    </tr>\n                </React.Fragment>\n            );\n        };\n\n        render() {\n            if (this.props.translations == null) {\n                return null;\n            }\n            return (\n                <tfoot>\n                    <tr>\n                        <th colSpan={4} className=\"text-center\">\n                            <button\n                                className=\"btn btn-primary\"\n                                onClick={this.toggleTranslations}\n                            >\n                                Translations\n                            </button>\n                        </th>\n                    </tr>\n                    {this.maybeShowFmcTranslationsDetails()}\n                </tfoot>\n            );\n        }\n    }\n);\n\nexport default FmcTranslationsDetail;\n","export const capitalize = (string) => string[0].toUpperCase() + string.slice(1);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { MAX_WCA_ROUNDS } from \"../constants/wca.constants\";\nimport { updateWcaEvent, updateFileZipBlob } from \"../redux/ActionCreators\";\nimport {\n    getDefaultCopiesExtension,\n    copiesExtensionId,\n} from \"../api/tnoodle.api\";\nimport MbldDetail from \"./MbldDetail\";\nimport FmcTranslationsDetail from \"./FmcTranslationsDetail\";\nimport \"./EventPicker.css\";\n\nconst mapStateToProps = (store) => ({\n    editingDisabled: store.editingDisabled,\n    wcif: store.wcif,\n    wcaFormats: store.wcaFormats,\n});\n\nconst mapDispatchToProps = {\n    updateWcaEvent,\n    updateFileZipBlob,\n};\n\nconst EventPicker = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class extends Component {\n        getWcaEvent = (rounds) => {\n            return { id: this.props.event.id, rounds };\n        };\n\n        handleNumberOfRoundsChange = (numberOfRounds, rounds) => {\n            // Ajust the number of rounds in case we have to remove\n            while (rounds.length > numberOfRounds) {\n                rounds.pop();\n            }\n\n            // case we have to add\n            let eventId = this.props.event.id;\n            while (rounds.length < numberOfRounds) {\n                rounds.push({\n                    id: eventId + \"-r\" + (rounds.length + 1),\n                    format: this.props.event.format_ids[0],\n                    scrambleSetCount: 1,\n                    extensions: [getDefaultCopiesExtension()],\n                });\n            }\n            let wcaEvent = this.getWcaEvent(rounds);\n            this.updateEvent(wcaEvent);\n        };\n\n        handleNumberOfScrambleSetsChange = (round, value, rounds) => {\n            if (value < 1) {\n                return;\n            }\n            rounds[round].scrambleSetCount = Number(value);\n            let wcaEvent = this.getWcaEvent(rounds);\n            this.updateEvent(wcaEvent);\n        };\n\n        handleRoundFormatChanged = (round, value, rounds) => {\n            rounds[round].format = value;\n            let wcaEvent = this.getWcaEvent(rounds);\n            this.updateEvent(wcaEvent);\n        };\n\n        handleNumberOfCopiesChange = (round, value, rounds) => {\n            if (value < 1) {\n                return;\n            }\n            rounds[round].extensions.find(\n                (extension) => extension.id === copiesExtensionId\n            ).data.numCopies = value;\n            let wcaEvent = this.getWcaEvent(rounds);\n            this.updateEvent(wcaEvent);\n        };\n\n        abbreviate = (str) => {\n            if (this.props.wcaFormats != null) {\n                return this.props.wcaFormats[str].shortName;\n            }\n            return \"-\";\n        };\n\n        updateEvent = (wcaEvent) => {\n            this.props.updateFileZipBlob(null);\n            this.props.updateWcaEvent(wcaEvent);\n        };\n\n        maybeShowTableTitles = (rounds) => {\n            if (rounds.length === 0) {\n                return null;\n            }\n            return (\n                <tr className=\"thead-light\">\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Format</th>\n                    <th scope=\"col\">Scramble Sets</th>\n                    <th scope=\"col\">Copies</th>\n                </tr>\n            );\n        };\n\n        maybeShowTableBody = (rounds) => {\n            if (rounds.length === 0) {\n                return;\n            }\n\n            return (\n                <tbody>\n                    {Array.from({ length: rounds.length }, (_, i) => {\n                        let copies = rounds[i].extensions.find(\n                            (extension) => extension.id === copiesExtensionId\n                        ).data.numCopies;\n                        return (\n                            <tr key={i} className=\"form-group\">\n                                <th scope=\"row\" className=\"align-middle\">\n                                    {i + 1}\n                                </th>\n                                <td className=\"align-middle\">\n                                    <select\n                                        className=\"form-control\"\n                                        value={rounds[i].format}\n                                        onChange={(evt) =>\n                                            this.handleRoundFormatChanged(\n                                                i,\n                                                evt.target.value,\n                                                rounds\n                                            )\n                                        }\n                                        disabled={\n                                            this.props.editingDisabled\n                                                ? \"disabled\"\n                                                : \"\"\n                                        }\n                                    >\n                                        {this.props.event.format_ids.map(\n                                            (format) => (\n                                                <option\n                                                    key={format}\n                                                    value={format}\n                                                >\n                                                    {this.abbreviate(format)}\n                                                </option>\n                                            )\n                                        )}\n                                    </select>\n                                </td>\n                                <td>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"number\"\n                                        value={rounds[i].scrambleSetCount}\n                                        onChange={(evt) =>\n                                            this.handleNumberOfScrambleSetsChange(\n                                                i,\n                                                Number(evt.target.value),\n                                                rounds\n                                            )\n                                        }\n                                        min={1}\n                                        disabled={\n                                            this.props.editingDisabled\n                                                ? \"disabled\"\n                                                : \"\"\n                                        }\n                                    />\n                                </td>\n                                <td>\n                                    <input\n                                        className=\"form-control\"\n                                        type=\"number\"\n                                        value={copies}\n                                        onChange={(evt) =>\n                                            this.handleNumberOfCopiesChange(\n                                                i,\n                                                Number(evt.target.value),\n                                                rounds\n                                            )\n                                        }\n                                        min={1}\n                                    />\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            );\n        };\n\n        render() {\n            let wcaEvent = this.props.wcif.events.find(\n                (event) => event.id === this.props.event.id\n            );\n            let rounds = wcaEvent != null ? wcaEvent.rounds : [];\n\n            return (\n                <table className=\"table table-sm shadow rounded\">\n                    <thead>\n                        <tr\n                            className={\n                                rounds.length === 0\n                                    ? \"thead-dark text-white\"\n                                    : \"thead-light\"\n                            }\n                        >\n                            <th className=\"firstColumn\" scope=\"col\"></th>\n                            <th\n                                scope=\"col\"\n                                className=\"align-middle secondColumn\"\n                            >\n                                <img\n                                    className=\"img-thumbnail cubingIcon\"\n                                    src={require(`../assets/cubing-icon/${this.props.event.id}.svg`)}\n                                    alt=\"TNoodle logo\"\n                                />\n                            </th>\n                            <th\n                                className=\"align-middle lastTwoColumns\"\n                                scope=\"col\"\n                            >\n                                <h5 className=\"font-weight-bold\">\n                                    {this.props.event.name}\n                                </h5>\n                            </th>\n                            <th className=\"lastTwoColumns\" scope=\"col\">\n                                <label>Rounds</label>\n                                <select\n                                    className=\"form-control\"\n                                    value={rounds.length}\n                                    onChange={(evt) =>\n                                        this.handleNumberOfRoundsChange(\n                                            evt.target.value,\n                                            rounds\n                                        )\n                                    }\n                                    disabled={\n                                        this.props.editingDisabled\n                                            ? \"disabled\"\n                                            : \"\"\n                                    }\n                                >\n                                    {Array.from(\n                                        { length: MAX_WCA_ROUNDS + 1 },\n                                        (_, i) => (\n                                            <option key={i} value={i}>\n                                                {i}\n                                            </option>\n                                        )\n                                    )}\n                                </select>\n                            </th>\n                        </tr>\n                        {this.maybeShowTableTitles(rounds)}\n                    </thead>\n                    {this.maybeShowTableBody(rounds)}\n                    {this.props.event.is_multiple_blindfolded &&\n                        rounds.length > 0 && <MbldDetail />}\n                    {this.props.event.is_fewest_moves && rounds.length > 0 && (\n                        <FmcTranslationsDetail />\n                    )}\n                </table>\n            );\n        }\n    }\n);\n\nexport default EventPicker;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n    fetchZip,\n    fetchAvailableFmcTranslations,\n    fetchFormats,\n    fetchWcaEvents,\n} from \"../api/tnoodle.api\";\nimport { toWcaUrl, isUsingStaging } from \"../api/wca.api\";\nimport {\n    updateFileZipBlob,\n    updateTranslations,\n    setWcaFormats,\n    setWcaEvents,\n    updateFlashMessage,\n} from \"../redux/ActionCreators\";\nimport EventPicker from \"./EventPicker\";\n\nlet DANGER = \"danger\";\n\nconst mapStateToProps = (store) => ({\n    wcif: store.wcif,\n    mbld: store.mbld,\n    password: store.password,\n    editingDisabled: store.editingDisabled,\n    competitionId: store.competitionId,\n    officialZip: store.officialZip,\n    fileZipBlob: store.fileZipBlob,\n    translations: store.translations,\n    wcaEvents: store.wcaEvents,\n});\n\nconst mapDispatchToProps = {\n    updateFileZipBlob,\n    updateTranslations,\n    setWcaFormats,\n    setWcaEvents,\n    updateFlashMessage,\n};\n\nconst BOOTSTRAP_GRID = 12;\nconst EVENTS_PER_LINE = 2;\n\nconst EventPickerTable = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                generatingScrambles: false,\n                competitionNameFileZip: \"\",\n            };\n        }\n\n        componentDidMount = function () {\n            this.getFormats();\n            this.getWcaEvents();\n            this.getFmcTranslations();\n        };\n\n        setFlashMessage = (text, bg, response) => {\n            this.props.updateFlashMessage(text + \" \" + response.statusText, bg);\n        };\n\n        getFormats = () => {\n            fetchFormats()\n                .then((response) => {\n                    if (response.ok) {\n                        return response.json();\n                    }\n\n                    // Error\n                    this.setFlashMessage(\n                        \"Could not get WCA formats\",\n                        DANGER,\n                        response\n                    );\n                })\n                .then((formats) => {\n                    this.props.setWcaFormats(formats);\n                });\n        };\n\n        getWcaEvents = () => {\n            fetchWcaEvents()\n                .then((response) => {\n                    if (response.ok) {\n                        return response.json();\n                    }\n\n                    // Error\n                    this.setFlashMessage(\n                        \"Could get WCA events\",\n                        DANGER,\n                        response\n                    );\n                })\n                .then((wcaEvents) => {\n                    this.props.setWcaEvents(wcaEvents);\n                });\n        };\n\n        getFmcTranslations = () => {\n            fetchAvailableFmcTranslations()\n                .then((response) => {\n                    if (response.ok) {\n                        return response.json();\n                    }\n\n                    // Error\n                    this.setFlashMessage(\n                        \"Could not get FMC translations.\",\n                        DANGER,\n                        response\n                    );\n                })\n                .then((availableTranslations) => {\n                    if (!availableTranslations) {\n                        return;\n                    }\n                    let translations = Object.keys(availableTranslations).map(\n                        (translationId) => ({\n                            id: translationId,\n                            display: availableTranslations[translationId],\n                            status: true,\n                        })\n                    );\n                    this.props.updateTranslations(translations);\n                });\n        };\n\n        handleScrambleButton = () => {\n            // If user navigates during generation proccess, we still get the correct name\n            this.setState({\n                ...this.state,\n                competitionNameFileZip: this.props.wcif.name,\n                generatingScrambles: true,\n            });\n            fetchZip(\n                this.props.wcif,\n                this.props.mbld,\n                this.props.password,\n                this.props.translations\n            )\n                .then((response) => {\n                    this.setGeneratingScrambles(false);\n                    if (response.ok) {\n                        return response.blob();\n                    }\n                    this.setFlashMessage(\n                        \"Could not get scrambles.\",\n                        DANGER,\n                        response\n                    );\n                })\n                .then((blob) => this.props.updateFileZipBlob(blob));\n        };\n\n        setGeneratingScrambles = (flag) => {\n            this.setState({ ...this.state, generatingScrambles: flag });\n        };\n\n        downloadZip = () => {\n            // We use the unofficialZip to stamp .zip in order to prevent delegates / organizers mistakes.\n            // If TNoodle version is not official (as per VersionInfo) or if we generate scrambles using\n            // a competition from staging, add a [Unofficial]\n\n            let isUnofficialZip =\n                !this.props.officialZip ||\n                (this.props.competitionId != null && isUsingStaging());\n\n            let fileName =\n                (isUnofficialZip ? \"[UNOFFICIAL] \" : \"\") +\n                this.state.competitionNameFileZip +\n                \".zip\";\n\n            const link = document.createElement(\"a\");\n            link.href = URL.createObjectURL(this.props.fileZipBlob);\n            link.download = fileName;\n            link.target = \"_blank\";\n            link.setAttribute(\"type\", \"hidden\");\n\n            // This is needed for firefox\n            document.body.appendChild(link);\n\n            link.click();\n            link.remove();\n        };\n\n        maybeShowEditWarning = () => {\n            if (this.props.competitionId == null) {\n                return;\n            }\n            return (\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>\n                            Found {this.props.wcif.events.length} event\n                            {this.props.wcif.events.length > 1\n                                ? \"s\"\n                                : \"\"} for {this.props.wcif.name}.\n                        </p>\n                        <p>\n                            You can view and change the rounds over on{\" \"}\n                            <a\n                                href={toWcaUrl(\n                                    `/competitions/${this.props.competitionId}/events/edit`\n                                )}\n                            >\n                                the WCA.\n                            </a>\n                            <strong>\n                                {\" \"}\n                                Refresh this page after making any changes on\n                                the WCA website.\n                            </strong>\n                        </p>\n                    </div>\n                </div>\n            );\n        };\n\n        scrambleButton = () => {\n            if (this.state.generatingScrambles) {\n                return (\n                    <button\n                        className=\"btn btn-primary btn-lg\"\n                        title=\"Wait until the process is done\"\n                        disabled\n                    >\n                        Generating Scrambles\n                    </button>\n                );\n            }\n            if (this.props.fileZipBlob != null) {\n                return (\n                    <button\n                        className=\"btn btn-success btn-lg\"\n                        onClick={this.downloadZip}\n                    >\n                        Download Scrambles\n                    </button>\n                );\n            }\n\n            // At least 1 events must have at least 1 round.\n            let disableScrambleButton = !this.props.wcif.events\n                .map((event) => event.rounds.length > 0)\n                .reduce((flag1, flag2) => flag1 || flag2, false);\n            return (\n                <button\n                    className=\"btn btn-primary btn-lg\"\n                    onClick={this.handleScrambleButton}\n                    disabled={disableScrambleButton}\n                    title={disableScrambleButton ? \"No events selected.\" : \"\"}\n                >\n                    Generate Scrambles\n                </button>\n            );\n        };\n\n        render() {\n            // Prevent from remembering previous order\n            let wcaEvents = this.props.wcaEvents;\n            if (wcaEvents == null) {\n                return null;\n            }\n\n            let events = this.props.wcif.events;\n            let editingDisabled = this.props.editingDisabled;\n\n            // This filters events to show only those in the competition.\n            if (editingDisabled) {\n                wcaEvents = wcaEvents.filter((wcaEvent) =>\n                    events.find((item) => item.id === wcaEvent.id)\n                );\n            }\n\n            let eventChunks = _.chunk(wcaEvents, EVENTS_PER_LINE);\n\n            let classColPerEvent = ` col-${BOOTSTRAP_GRID / EVENTS_PER_LINE}`;\n            return (\n                <div className=\"row\">\n                    <div className=\"container-fluid\">\n                        {this.maybeShowEditWarning()}\n                        {eventChunks.map((chunk, i) => {\n                            return (\n                                <div className=\"row p-0\" key={i}>\n                                    {chunk.map((event) => {\n                                        return (\n                                            <div\n                                                className={classColPerEvent}\n                                                key={event.id}\n                                            >\n                                                <EventPicker\n                                                    event={event}\n                                                    wcifEvent={this.props.wcif.events.find(\n                                                        (item) =>\n                                                            item.id === event.id\n                                                    )}\n                                                    disabled={editingDisabled}\n                                                    setBlobNull={\n                                                        this.setBlobNull\n                                                    }\n                                                />\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            );\n                        })}\n                        <div className=\"row form-group p-3\">\n                            <div className=\"col-12\">\n                                {this.scrambleButton()}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n\nexport default EventPickerTable;\n","import React from \"react\";\n\nconst Loading = () => (\n    <div className=\"spinner-border m-2\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n);\n\nexport default Loading;\n","export const defaultWcif = {\n    formatVersion: \"1.0\",\n    name: \"\",\n    shortName: \"\",\n    id: \"\",\n    events: [],\n    persons: [],\n    schedule: { numberOfDays: 0, venues: [] },\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Loading from \"./Loading\";\nimport {\n    updateWcif,\n    updateEditingStatus,\n    updateCompetitionName,\n    updateCompetitions,\n    updateMe,\n    updateCompetitionId,\n    updateFileZipBlob,\n    addCachedObject,\n    addSuggestedFmcTranslations,\n    setSuggestedFmcTranslations,\n    setBestMbldAttempt,\n} from \"../redux/ActionCreators\";\nimport { defaultWcif } from \"../constants/default.wcif\";\nimport {\n    isLogged,\n    logIn,\n    logOut,\n    fetchMe,\n    getUpcomingManageableCompetitions,\n    getCompetitionJson,\n    getQueryParameter,\n} from \"../api/wca.api\";\nimport {\n    fetchSuggestedFmcTranslations,\n    fetchBestMbldAttempt,\n} from \"../api/tnoodle.api\";\nimport { getDefaultCompetitionName } from \"../util/competition.name.util\";\nimport \"./SideBar.css\";\n\nconst mapStateToProps = (store) => ({\n    me: store.me,\n    competitions: store.competitions,\n    cachedObjects: store.cachedObjects,\n});\n\nconst mapDispatchToProps = {\n    updateWcif,\n    updateEditingStatus,\n    updateCompetitionName,\n    updateCompetitions,\n    updateMe,\n    updateCompetitionId,\n    updateFileZipBlob,\n    addCachedObject,\n    addSuggestedFmcTranslations,\n    setSuggestedFmcTranslations,\n    setBestMbldAttempt,\n};\n\nconst SideBar = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                me: props.me,\n                competitions: props.competitions,\n                loadingUser: false,\n                loadingCompetitions: false,\n                loadingCompetitionInformation: false,\n                competitionId: null,\n            };\n        }\n        margin = 1; // Margin for login button and \"Manual Selection\"\n\n        componentDidMount() {\n            if (this.state.me == null && isLogged()) {\n                this.setLoadingUser(true);\n                fetchMe()\n                    .then((me) => {\n                        this.setState({ ...this.state, me });\n                        this.props.updateMe(me);\n                        this.setLoadingUser(false);\n                    })\n                    .catch((e) => {\n                        console.error(\n                            \"Could not get information about the logged user\",\n                            e\n                        );\n                        this.setLoadingUser(false);\n                    });\n            }\n\n            if (this.state.competitions == null && isLogged()) {\n                this.setLoadingCompetitions(true);\n                getUpcomingManageableCompetitions()\n                    .then((competitions) => {\n                        this.setState({ ...this.state, competitions });\n                        this.props.updateCompetitions(competitions);\n                        this.setLoadingCompetitions(false);\n                    })\n                    .catch((e) => {\n                        console.error(\"Could not get upcoming competitions\", e);\n                        this.setLoadingCompetitions(false);\n                    });\n            }\n\n            let competitionId = getQueryParameter(\"competitionId\");\n            if (competitionId != null) {\n                this.handleCompetitionSelection(competitionId);\n            }\n        }\n\n        setLoadingUser = (flag) => {\n            this.setState({ ...this.state, loadingUser: flag });\n        };\n\n        setLoadingCompetitions = (flag) => {\n            this.setState({ ...this.state, loadingCompetitions: flag });\n        };\n\n        setLoadingCompetitionInformation = (flag) => {\n            this.setState({\n                ...this.state,\n                loadingCompetitionInformation: flag,\n            });\n        };\n\n        pluralize = (string, number) => {\n            return string + (number > 1 ? \"s\" : \"\");\n        };\n\n        currentLocationWithoutQuery = () => {\n            return window.location.origin + window.location.pathname;\n        };\n\n        setPageWithoutRedirect = (url) => {\n            window.history.pushState(null, \"\", url);\n        };\n\n        handleManualSelection = () => {\n            this.props.updateEditingStatus(false);\n            this.props.updateCompetitionId(null);\n            this.props.updateWcif({ ...defaultWcif });\n            this.props.setBestMbldAttempt(null);\n            this.props.updateCompetitionName(getDefaultCompetitionName());\n            this.props.updateFileZipBlob(null);\n            this.removeCompetitionIdQueryParam();\n        };\n\n        handleCompetitionSelection = (competitionId) => {\n            this.updateCompetitionIdQueryParam(competitionId);\n\n            // For quick switching between competitions.\n            let cachedObject = this.props.cachedObjects[competitionId];\n            if (cachedObject != null) {\n                let cachedWcif = cachedObject.wcif;\n                this.setWcif(cachedWcif);\n                this.maybeAddCompetition(cachedWcif.id, cachedWcif.name);\n\n                let cachedSuggestedFmcTranslations =\n                    cachedObject.suggestedFmcTranslations;\n                this.props.addSuggestedFmcTranslations(\n                    cachedSuggestedFmcTranslations\n                );\n\n                let cachedBestMbldAttempt = cachedObject.bestMbldAttempt;\n                this.props.setBestMbldAttempt(cachedBestMbldAttempt);\n                return;\n            }\n\n            this.setState({\n                ...this.state,\n                loadingCompetitionInformation: true,\n                competitionId,\n            });\n\n            getCompetitionJson(competitionId)\n                .then((wcif) => {\n                    this.setWcif(wcif);\n                    this.props.addCachedObject(competitionId, \"wcif\", wcif);\n                    this.maybeAddCompetition(wcif.id, wcif.name);\n\n                    this.getAndCacheSuggestedFmcTranslations(wcif);\n\n                    this.getAndCacheBestMbldAttempt(wcif);\n                })\n                .catch((e) => {\n                    console.error(\n                        \"Could not get information for \" + competitionId,\n                        e\n                    );\n                    this.setLoadingCompetitionInformation(false);\n                });\n        };\n\n        getAndCacheSuggestedFmcTranslations = (wcif) => {\n            fetchSuggestedFmcTranslations(wcif)\n                .then((response) => response.json())\n                .then((translations) => {\n                    this.props.addCachedObject(\n                        wcif.id,\n                        \"suggestedFmcTranslations\",\n                        translations\n                    );\n                    this.props.addSuggestedFmcTranslations(translations);\n                });\n        };\n\n        getAndCacheBestMbldAttempt = (wcif) => {\n            fetchBestMbldAttempt(wcif)\n                .then((response) => response.json())\n                .then((bestAttempt) => {\n                    let attempted = bestAttempt.attempted;\n                    this.props.addCachedObject(\n                        wcif.id,\n                        \"bestMbldAttempt\",\n                        attempted\n                    );\n                    this.props.setBestMbldAttempt(attempted);\n                });\n        };\n\n        // In case we use competitionId from query params, it's not fetched.\n        // We add it to the list.\n        maybeAddCompetition = (competitionId, competitionName) => {\n            if (!this.state.competitions) {\n                return;\n            }\n            if (\n                !this.state.competitions.find(\n                    (competition) => competition.name === competitionName\n                )\n            ) {\n                this.setState({\n                    ...this.state,\n                    competitions: [\n                        ...this.state.competitions,\n                        { id: competitionId, name: competitionName },\n                    ],\n                });\n            }\n        };\n\n        updateCompetitionIdQueryParam = (competitionId) => {\n            var searchParams = new URLSearchParams(window.location.search);\n            searchParams.set(\"competitionId\", competitionId);\n            this.setPageWithoutRedirect(\n                this.currentLocationWithoutQuery() +\n                    \"?\" +\n                    searchParams.toString()\n            );\n        };\n\n        removeCompetitionIdQueryParam = () => {\n            var searchParams = new URLSearchParams(window.location.search);\n            searchParams.delete(\"competitionId\");\n            this.setPageWithoutRedirect(\n                this.currentLocationWithoutQuery() +\n                    \"?\" +\n                    searchParams.toString()\n            );\n        };\n\n        setWcif = (wcif) => {\n            this.setLoadingCompetitionInformation(false);\n            this.props.updateEditingStatus(true);\n            this.props.updateWcif(wcif);\n            this.props.updateCompetitionId(wcif.id);\n            this.props.updateCompetitionName(wcif.name);\n            this.props.updateFileZipBlob(null);\n        };\n\n        setSuggestedFmcTranslations = (suggestedFmcTranslations) => {\n            if (suggestedFmcTranslations != null) {\n                this.props.setSuggestedFmcTranslations(\n                    suggestedFmcTranslations\n                );\n            }\n        };\n\n        logInButton = () => {\n            return (\n                <div id=\"login-area\" className={`w-100 mt-${this.margin}`}>\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary btn-lg btn-block btn-outline-light\"\n                        onClick={isLogged() ? logOut : logIn}\n                    >\n                        {isLogged() ? \"Log Out\" : \"Log In\"}\n                    </button>\n                    {this.state.me != null && (\n                        <p className=\"text-white mt-2\">\n                            Welcome, {this.state.me.name}.{\" \"}\n                            {this.state.competitions != null &&\n                                `You have ${\n                                    this.state.competitions.length\n                                } manegeable ${this.pluralize(\n                                    \" competition\",\n                                    this.state.competitions.length\n                                )} upcoming.`}\n                        </p>\n                    )}\n                </div>\n            );\n        };\n\n        loadingArea = () => {\n            if (this.state.loadingUser) {\n                return (\n                    <div className=\"text-white\">\n                        <Loading />\n                        <p>Loading user...</p>\n                    </div>\n                );\n            }\n\n            if (this.state.loadingCompetitions) {\n                return (\n                    <div className=\"text-white\">\n                        <Loading />\n                        <p>Loading competitions...</p>\n                    </div>\n                );\n            }\n\n            if (this.state.loadingCompetitionInformation) {\n                return (\n                    <div className=\"text-white\">\n                        <Loading />\n                        <p>\n                            Loading information for {this.state.competitionId}\n                            ...\n                        </p>\n                    </div>\n                );\n            }\n        };\n\n        render() {\n            return (\n                <div className=\"h-100\">\n                    <img\n                        className=\"tnoodle-logo mt-2\"\n                        src={require(\"../assets/tnoodle_logo.svg\")}\n                        alt=\"TNoodle logo\"\n                    />\n                    <h1 className=\"display-3\" id=\"title\">\n                        TNoodle\n                    </h1>\n                    <div>\n                        <ul className=\"list-group\">\n                            <li>\n                                {(this.state.competitions != null &&\n                                    this.state.competitions.length) > 0 && (\n                                    <button\n                                        type=\"button\"\n                                        className={`btn btn-primary btn-lg btn-block btn-outline-light mb-${this.margin}`}\n                                        onClick={this.handleManualSelection}\n                                    >\n                                        Manual Selection\n                                    </button>\n                                )}\n                            </li>\n                            {this.state.competitions != null &&\n                                this.state.competitions.map(\n                                    (competition, i) => (\n                                        <li key={i}>\n                                            <button\n                                                type=\"button\"\n                                                className=\"btn btn-primary btn-lg btn-block m-1\"\n                                                onClick={(_) =>\n                                                    this.handleCompetitionSelection(\n                                                        competition.id\n                                                    )\n                                                }\n                                            >\n                                                {competition.name}\n                                            </button>\n                                        </li>\n                                    )\n                                )}\n                        </ul>\n\n                        {this.loadingArea()}\n                    </div>\n                    {this.logInButton()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default SideBar;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateFlashMessage } from \"../redux/ActionCreators\";\n\nconst mapStateToProps = (store) => ({\n    flashMessage: store.flashMessage,\n});\n\nconst mapDispatchToProps = {\n    updateFlashMessage,\n};\n\nconst FlashMessage = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(\n    class extends Component {\n        render() {\n            let text = this.props.flashMessage.text;\n            let bg = this.props.flashMessage.bootstrapBackground;\n            if (!text || !bg) {\n                return null;\n            }\n\n            // Clear the message after 5 seconds\n            setTimeout(() => {\n                this.props.updateFlashMessage(\"\", \"\");\n            }, 5 * 1000);\n\n            return (\n                <div className=\"row sticky-top\">\n                    <div className={`col-12 bg-${bg}`}>{text}</div>\n                </div>\n            );\n        }\n    }\n);\n\nexport default FlashMessage;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchRunningVersion } from \"../api/tnoodle.api\";\nimport { fetchVersionInfo } from \"../api/wca.api\";\nimport { updateOfficialZipStatus } from \"../redux/ActionCreators\";\n\nconst mapDispatchToProps = {\n    updateOfficialZipStatus,\n};\n\nconst VersionInfo = connect(\n    null,\n    mapDispatchToProps\n)(\n    class extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                currentTnoodle: null,\n                allowedTnoodleVersions: null,\n                runningVersion: null,\n                officialBuild: null,\n            };\n        }\n\n        componentDidMount() {\n            // Fetch from WCA API.\n            fetchVersionInfo()\n                .then((response) => {\n                    this.setState({\n                        ...this.state,\n                        currentTnoodle: response.current,\n                        allowedTnoodleVersions: response.allowed,\n                    });\n                })\n                .catch((e) => console.error(e));\n\n            fetchRunningVersion()\n                .then((response) => response.json())\n                .then((version) => {\n                    let { runningVersion, officialBuild } = version;\n                    this.setState({\n                        ...this.state,\n                        runningVersion,\n                        officialBuild,\n                    });\n                })\n                .catch((e) => console.error(e));\n        }\n\n        render() {\n            let runningVersion = this.state.runningVersion;\n            let allowedVersions = this.state.allowedTnoodleVersions;\n            let currentTnoodle = this.state.currentTnoodle;\n            let officialBuild = this.state.officialBuild;\n\n            // We cannot analyze TNoodle version here. We do not bother the user.\n            if (!runningVersion || !allowedVersions) {\n                return null;\n            }\n\n            // Best case scenario\n            if (runningVersion === currentTnoodle.name) {\n                return null;\n            }\n\n            // Generated version is not an official jar\n            if (!officialBuild) {\n                this.props.updateOfficialZipStatus(false);\n                return (\n                    <div className=\"row text-right\">\n                        <div className=\"col-12 alert alert-danger\">\n                            This TNoodle version is not official and scrambles\n                            generated with this must not be used in competition.\n                            You are on version {runningVersion}, you should use{\" \"}\n                            {currentTnoodle.name} available{\" \"}\n                            <a href={currentTnoodle.download}>here</a>\n                        </div>\n                    </div>\n                );\n            }\n\n            // Running version is not allowed anymore.\n            if (!allowedVersions.includes(runningVersion)) {\n                this.props.updateOfficialZipStatus(false);\n                return (\n                    <div className=\"row text-white text-right\">\n                        <div className=\"col-12 alert alert-danger\">\n                            This TNoodle version is not allowed. Do not use\n                            scrambles generated in any official competition and\n                            consider downloading the latest version{\" \"}\n                            <a href={this.state.currentTnoodle.download}>\n                                here\n                            </a>\n                            .\n                        </div>\n                    </div>\n                );\n            }\n\n            // Running version is allowed, but not the latest.\n            if (\n                allowedVersions.includes(runningVersion) &&\n                runningVersion !== currentTnoodle.name\n            ) {\n                return (\n                    <div className=\"row text-white text-right\">\n                        <div className=\"col-12 alert alert-info\">\n                            You are running {runningVersion}, which is still\n                            allowed, but you should upgrade to{\" \"}\n                            {currentTnoodle.name} available{\" \"}\n                            <a href={currentTnoodle.download}>here</a>.\n                        </div>\n                    </div>\n                );\n            }\n\n            return null;\n        }\n    }\n);\n\nexport default VersionInfo;\n","import React, { Component } from \"react\";\nimport EntryInterface from \"./components/EntryInterface\";\nimport EventPickerTable from \"./components/EventPickerTable\";\nimport SideBar from \"./components/SideBar\";\nimport FlashMessage from \"./components/FlashMessage\";\nimport VersionInfo from \"./components/VersionInfo\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div\n                            className=\"col-3 bg-dark sticky-top overflow-auto\"\n                            id=\"side-bar\"\n                        >\n                            <SideBar />\n                        </div>\n                        <div className=\"col-9\">\n                            <FlashMessage />\n                            <VersionInfo />\n                            <EntryInterface />\n                            <EventPickerTable />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\nexport const BASE_PATH = process.env.PUBLIC_URL;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionTypes } from \"./Types\";\nimport { defaultWcif } from \"../constants/default.wcif\";\nimport { MBLD_DEFAULT } from \"../constants/wca.constants\";\nimport { getDefaultCopiesExtension } from \"../api/tnoodle.api\";\nimport { competitionName2Id } from \"../util/competition.name.util\";\n\nconst defaultStore = {\n    wcif: defaultWcif,\n    mbld: MBLD_DEFAULT,\n    password: \"\",\n    editingDisabled: false,\n    officialZip: true,\n    fileZipBlob: null,\n    cachedObjects: {},\n    translations: null,\n    suggestedFmcTranslations: null,\n    bestMbldAttempt: null,\n    wcaFormats: null,\n    wcaEvents: null,\n    flashMessage: { text: \"\", bootstrapBackground: \"\" },\n    competitions: null,\n};\n\nexport const Reducer = (store, action) => {\n    if (action.type === ActionTypes.UPDATE_ME) {\n        return {\n            ...store,\n            me: action.payload.me,\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_EVENTS) {\n        return {\n            ...store,\n            wcif: { ...store.wcif, events: action.payload.events },\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_PASSWORD) {\n        return {\n            ...store,\n            password: action.payload.password,\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_COMPETITION_NAME) {\n        let competitionName = action.payload.competitionName;\n        let id = competitionName2Id(competitionName);\n        return {\n            ...store,\n            wcif: {\n                ...store.wcif,\n                name: competitionName,\n                shortName: competitionName,\n                id,\n            },\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_WCA_EVENT) {\n        return {\n            ...store,\n            wcif: {\n                ...store.wcif,\n                events: [\n                    ...store.wcif.events.filter(\n                        (wcaEvent) => wcaEvent.id !== action.payload.wcaEvent.id\n                    ),\n                    action.payload.wcaEvent,\n                ],\n            },\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_MBLD) {\n        return {\n            ...store,\n            mbld: action.payload.mbld,\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_COMPETITIONS) {\n        return {\n            ...store,\n            competitions: action.payload.competitions,\n        };\n    }\n\n    /**\n     * Either sets or reset WCIF to default.\n     */\n    if (action.type === ActionTypes.UPDATE_WCIF) {\n        let wcif = action.payload.wcif || defaultWcif;\n\n        // Sets copies to 1 since it does not come from the website.\n        wcif.events.forEach((event) =>\n            event.rounds.forEach((round) =>\n                round.extensions.push(getDefaultCopiesExtension())\n            )\n        );\n        return {\n            ...store,\n            wcif,\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_EDITING_STATUS) {\n        return {\n            ...store,\n            editingDisabled: action.payload.editingDisabled,\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_COMPETITION_ID) {\n        return { ...store, competitionId: action.payload.competitionId };\n    }\n\n    if (action.type === ActionTypes.UPDATE_OFFICIAL_ZIP_STATUS) {\n        return { ...store, officialZip: action.payload.officialZip };\n    }\n\n    if (action.type === ActionTypes.UPDATE_FILE_ZIP_BLOB) {\n        return { ...store, fileZipBlob: action.payload.fileZipBlob };\n    }\n\n    if (action.type === ActionTypes.ADD_CACHED_OBJECT) {\n        return {\n            ...store,\n            cachedObjects: {\n                ...store.cachedObjects,\n                [action.payload.competitionId]: {\n                    ...store.cachedObjects[action.payload.competitionId],\n                    [action.payload.identifier]: action.payload.object,\n                },\n            },\n        };\n    }\n\n    if (action.type === ActionTypes.RESET_TRANSLATIONS) {\n        return {\n            ...store,\n            translations: [\n                ...store.translations.map((translation) => ({\n                    ...translation,\n                    status: false,\n                })),\n            ],\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_TRANSLATION) {\n        return {\n            ...store,\n            translations: [\n                ...store.translations.map((translation) => ({\n                    ...translation,\n                    status:\n                        translation.id === action.payload.id\n                            ? !translation.status\n                            : translation.status,\n                })),\n            ],\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_TRANSLATIONS) {\n        return {\n            ...store,\n            translations: action.payload.translations,\n        };\n    }\n\n    if (action.type === ActionTypes.SELECT_ALL_TRANSLATIONS) {\n        return {\n            ...store,\n            translations: [\n                ...store.translations.map((translation) => ({\n                    ...translation,\n                    status: true,\n                })),\n            ],\n        };\n    }\n\n    if (action.type === ActionTypes.ADD_SUGGESTED_FMC_TRANSLATIONS) {\n        return {\n            ...store,\n            suggestedFmcTranslations: action.payload.suggestedFmcTranslations,\n        };\n    }\n\n    if (action.type === ActionTypes.SET_SUGGESTED_FMC_TRANSLATIONS) {\n        let translations = store.translations.map((translation) => ({\n            ...translation,\n            status: action.payload.suggestedFmcTranslations.includes(\n                translation.id\n            ),\n        }));\n        return {\n            ...store,\n            translations: [...translations],\n        };\n    }\n\n    if (action.type === ActionTypes.SET_BEST_MBLD_ATTEMPT) {\n        return {\n            ...store,\n            bestMbldAttempt: action.payload.bestMbldAttempt,\n        };\n    }\n\n    if (action.type === ActionTypes.SET_WCA_FORMATS) {\n        return {\n            ...store,\n            wcaFormats: action.payload.wcaFormats,\n        };\n    }\n\n    if (action.type === ActionTypes.SET_WCA_EVENTS) {\n        return {\n            ...store,\n            wcaEvents: action.payload.wcaEvents,\n        };\n    }\n\n    if (action.type === ActionTypes.UPDATE_FLASH_MESSAGE) {\n        return {\n            ...store,\n            flashMessage: {\n                text: action.payload.text,\n                bootstrapBackground: action.payload.bootstrapBackground,\n            },\n        };\n    }\n\n    return store || defaultStore;\n};\n","import { createStore } from \"redux\";\nimport { Reducer } from \"./Reducers\";\n\nconst store = createStore(Reducer);\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/Store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}